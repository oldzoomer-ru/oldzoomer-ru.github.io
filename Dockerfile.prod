# Оптимизированная многоэтапная сборка для production
FROM node:18-alpine AS deps
# Устанавливаем libc6-compat для Alpine
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Копируем файлы зависимостей
COPY react-site/package.json react-site/package-lock.json* ./
RUN npm ci --only=production && npm cache clean --force

# Этап сборки
FROM node:18-alpine AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY react-site/ ./

# Собираем приложение
RUN npm run build

# Production этап с nginx
FROM nginx:stable-alpine AS runner

# Устанавливаем дополнительные пакеты для безопасности и мониторинга
RUN apk add --no-cache dumb-init curl

# Копируем собранное приложение
COPY --from=builder /app/build /usr/share/nginx/html

# Копируем кастомную конфигурацию nginx
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Удаляем default конфигурацию nginx
RUN rm -f /etc/nginx/conf.d/default.conf.default

# Создаем директории для логов
RUN mkdir -p /var/log/nginx && \
    chmod 755 /var/log/nginx

EXPOSE 80

# Добавляем healthcheck
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/ || exit 1

# Используем dumb-init для правильной обработки сигналов
ENTRYPOINT ["dumb-init", "--"]
CMD ["nginx", "-g", "daemon off;"]
